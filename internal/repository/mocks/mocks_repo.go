// Code generated by MockGen. DO NOT EDIT.
// Source: repositoryInterface.go

// Package mocks_repo is a generated GoMock package.
package mocks_repo

import (
	context "context"
	reflect "reflect"

	balance "github.com/DenisquaP/yandex_gophermart/internal/models/balance"
	orders "github.com/DenisquaP/yandex_gophermart/internal/models/orders"
	users "github.com/DenisquaP/yandex_gophermart/internal/models/users"
	gomock "github.com/golang/mock/gomock"
)

// MockDBStore is a mock of DBStore interface.
type MockDBStore struct {
	ctrl     *gomock.Controller
	recorder *MockDBStoreMockRecorder
}

// MockDBStoreMockRecorder is the mock recorder for MockDBStore.
type MockDBStoreMockRecorder struct {
	mock *MockDBStore
}

// NewMockDBStore creates a new mock instance.
func NewMockDBStore(ctrl *gomock.Controller) *MockDBStore {
	mock := &MockDBStore{ctrl: ctrl}
	mock.recorder = &MockDBStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBStore) EXPECT() *MockDBStoreMockRecorder {
	return m.recorder
}

// CheckLogin mocks base method.
func (m *MockDBStore) CheckLogin(ctx context.Context, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLogin", ctx, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckLogin indicates an expected call of CheckLogin.
func (mr *MockDBStoreMockRecorder) CheckLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLogin", reflect.TypeOf((*MockDBStore)(nil).CheckLogin), ctx, login)
}

// GetBalance mocks base method.
func (m *MockDBStore) GetBalance(ctx context.Context, userID int) (balance.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(balance.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockDBStoreMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockDBStore)(nil).GetBalance), ctx, userID)
}

// GetOrders mocks base method.
func (m *MockDBStore) GetOrders(ctx context.Context, userID int) ([]*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockDBStoreMockRecorder) GetOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockDBStore)(nil).GetOrders), ctx, userID)
}

// GetUserIDByOrder mocks base method.
func (m *MockDBStore) GetUserIDByOrder(ctx context.Context, order string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByOrder", ctx, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByOrder indicates an expected call of GetUserIDByOrder.
func (mr *MockDBStoreMockRecorder) GetUserIDByOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByOrder", reflect.TypeOf((*MockDBStore)(nil).GetUserIDByOrder), ctx, order)
}

// GetWithdrawals mocks base method.
func (m *MockDBStore) GetWithdrawals(ctx context.Context, userID int) ([]*users.Withdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]*users.Withdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockDBStoreMockRecorder) GetWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockDBStore)(nil).GetWithdrawals), ctx, userID)
}

// Login mocks base method.
func (m *MockDBStore) Login(ctx context.Context, login, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockDBStoreMockRecorder) Login(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockDBStore)(nil).Login), ctx, login, password)
}

// Register mocks base method.
func (m *MockDBStore) Register(ctx context.Context, login, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, login, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockDBStoreMockRecorder) Register(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDBStore)(nil).Register), ctx, login, password)
}

// UpdateStatus mocks base method.
func (m *MockDBStore) UpdateStatus(ctx context.Context, order, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockDBStoreMockRecorder) UpdateStatus(ctx, order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockDBStore)(nil).UpdateStatus), ctx, order, status)
}

// UploadOrder mocks base method.
func (m *MockDBStore) UploadOrder(ctx context.Context, userID int, order *orders.OrderAccrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadOrder", ctx, userID, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadOrder indicates an expected call of UploadOrder.
func (mr *MockDBStoreMockRecorder) UploadOrder(ctx, userID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadOrder", reflect.TypeOf((*MockDBStore)(nil).UploadOrder), ctx, userID, order)
}

// Withdraw mocks base method.
func (m *MockDBStore) Withdraw(ctx context.Context, userID int, sum float32, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userID, sum, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockDBStoreMockRecorder) Withdraw(ctx, userID, sum, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockDBStore)(nil).Withdraw), ctx, userID, sum, order)
}
